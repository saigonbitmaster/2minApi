
/*  
const project_id = 'testnetIfDtKzgYc9g9JoYya8rIcc6JclEhn82F';
const address =
  'addr_test1qrsyt5qv7pvdcqf9thpmjyv6kukpqv4nmr3tqjy6k6tm6705dl4czkn5ap78f35r0q8yudwazghgqdcad4sx2srew9vqe7c7lv';
const blockfrost_url = 'https://cardano-testnet.blockfrost.io/api/v0';
const tx_hash =
  '2b42c4afac849ebde0cbee6c2279327bdc0a1ff2dd07a78dc9e7c3aab601d166';
 */



/*
sample query address and utx data return
[{"tx_hash":"2ca59d4a31f670fd616ca34f565e54c7c8ef77320edee3839e4cccc4ae6d826c","tx_index":0,"output_index":0,"amount":[{"unit":"lovelace","quantity":"792414466"}],"block":"4519b697a45a019dbd5dc262eadb65c912fb15162fabd4d296c9fe50ad0dd107","data_hash":null,"inline_datum":null,"reference_script_hash":null},{"tx_hash":"57b75590ac0d66648bb6dcd35bbb56a94b5f027c563ba47b504db1a6f864fe2b","tx_index":0,"output_index":0,"amount":[{"unit":"lovelace","quantity":"540295609"}],"block":"75f9a61ce3bbd1f8b8c2dfaeff07dd5211d4554fb1eaa23bdf58260a8c38d6c8","data_hash":null,"inline_datum":null,"reference_script_hash":null},{"tx_hash":"2b42c4afac849ebde0cbee6c2279327bdc0a1ff2dd07a78dc9e7c3aab601d166","tx_index":0,"output_index":0,"amount":[{"unit":"lovelace","quantity":"1000000000"}],"block":"9c91fdb53afe1c24104b1b6ebe025e1d708d2f0b484720ad00c61975ce6ca7ac","data_hash":null,"inline_datum":null,"reference_script_hash":null}]

{"hash":"2b42c4afac849ebde0cbee6c2279327bdc0a1ff2dd07a78dc9e7c3aab601d166","inputs":[{"address":"addr_test1qpj77cee90mwvcwpyj9wx5r5y95e22pv9hs0avjs32s6ssnvvz7nw9gmznn65g4ksrrfvyzhz52knc3mqxdyya47gz2qxgyan8","amount":[{"unit":"lovelace","quantity":"5757429966194"},{"unit":"d93a9c6d85ce15c3f19105f3be5b80c21e6c4ad3fb6b936b5b701715434c4150","quantity":"12000"}],"tx_hash":"bc0873639923366d62dd821aafa2992bff1cd0b0ed81493c800fea2c147b730a","output_index":1,"data_hash":null,"inline_datum":null,"reference_script_hash":null,"collateral":false,"reference":false}],"outputs":[{"address":"addr_test1qrsyt5qv7pvdcqf9thpmjyv6kukpqv4nmr3tqjy6k6tm6705dl4czkn5ap78f35r0q8yudwazghgqdcad4sx2srew9vqe7c7lv","amount":[{"unit":"lovelace","quantity":"1000000000"}],"output_index":0,"data_hash":null,"inline_datum":null,"collateral":false,"reference_script_hash":null},{"address":"addr_test1qpukfjshz58jn57kp6wdtareqfmppyxjhj47anfafunppztvvz7nw9gmznn65g4ksrrfvyzhz52knc3mqxdyya47gz2qzda34s","amount":[{"unit":"lovelace","quantity":"5756429794929"},{"unit":"d93a9c6d85ce15c3f19105f3be5b80c21e6c4ad3fb6b936b5b701715434c4150","quantity":"12000"}],"output_index":1,"data_hash":null,"inline_datum":null,"collateral":false,"reference_script_hash":null}]}
*/


//get git commits response sample data:
[{
    message: 'Post job resource',
    author: 'saigonbitmaster',
    date: '2022-06-23T18:31:43Z',
    url: 'https://github.com/saigonbitmaster/bWorksPublic/commit/b61b34fb48ac3bc4bff9281a639d338c1cee32a5'
  },
  {
    message: 'add translate',
    author: 'saigonbitmaster',
    date: '2022-06-23T18:25:50Z',
    url: 'https://github.com/saigonbitmaster/bWorksPublic/commit/caadb285b0bbdd49a562eaecd568c038adc317f7'
  },
  {
    message: 'clean up',
    author: 'saigonbitmaster',
    date: '2022-06-23T18:11:45Z',
    url: 'https://github.com/saigonbitmaster/bWorksPublic/commit/40ece52f0bd0e90eaf48622856b287b755b28cc7'
  },
  {
    message: 'misc',
    author: 'saigonbitmaster',
    date: '2022-06-23T17:54:50Z',
    url: 'https://github.com/saigonbitmaster/bWorksPublic/commit/becb1a164564214b5aaa38982cafcad95da38e25'
  },]

//use .env in nestjs 
 ConfigModule.forRoot({
      isGlobal: true, //to use process.env at other modules
    }),


  //process.env.VARIABLE need to do inside class function, not at top level of code file

#mongoose to return pure object allow add/remove key: add lean()
const data = await this.model
      .find(query.filter)
      .sort(query.sort)
      .skip(query.skip)
      .limit(query.limit)
      .lean()
      .exec();

//no error
const _data: any = data.map((item) => {
  return { ...item, rate: 10 };
  });

#force git to update .gitignore file:
git rm -r --cached .
git status 



#APi explorer
http://localhost:3000/api

#mongoose reference for filter, aggregation, this has some different from origin mongodb operator:
https://mongoosejs.com/docs/api.html#model_Model-find

#create new url for post method:

  @Post('/abc')
  async create1(@Body() createTodoDto: CreateTodoDto) {
    return await this.service.create(createTodoDto);
  }

  curl -X 'POST' \
  'http://localhost:3000/todos/abc' \
  -H 'accept: */*' \
  -H 'Content-Type: application/json' \
  -d '{"title": "nextPost"}'

#webpack is not support bcrypt, so hot reload will not work with bcrypt

#authentication:
https://docs.nestjs.com/security/authentication

just move the controller from app.controller.ts to auth/auth.controller to expose API + use User store by mongo

#test authentication & authorization
$ # GET /profile
$ curl http://localhost:3000/auth/profile (protected method)
$ # result -> {"statusCode":401,"message":"Unauthorized"}

$ # POST /auth/login
$ curl -X POST http://localhost:3000/auth/login -d '{"username": "john", "password": "changeme"}' -H "Content-Type: application/json"
$ # result -> {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm... }

$ # GET /profile using access_token returned from previous step as bearer code
$ curl http://localhost:3000/auth/profile -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm..."
$ # result -> {"userId":1,"username":"john"}

#serve static files, 
create cms folder at backend root folder
build frontend then copy all file to backend/cms
add below config to app.module.ts
restart nest -> see static http: localhost:3000/cms

import { ServeStaticModule } from '@nestjs/serve-static';
import { join } from 'path';

@Module({
  imports: [
    ServeStaticModule.forRoot({
      rootPath: join(__dirname, '..', 'cms')
    }),
    
  ],
})
export class AppModule {}


//import sheets

public decorator 
import { ExecutionContext, Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { Reflector } from '@nestjs/core';
import { Observable } from 'rxjs';
import { IS_PUBLIC_KEY } from '../decorators/public.api.decorator';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  constructor(private readonly reflector: Reflector) {
    super();
  }

  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
    if (isPublic) return true;
    return super.canActivate(context);
  }
}

#app module to active roles guards
import { APP_GUARD } from '@nestjs/core';
import { RolesGuard } from './guards/roles.guard';
import { JwtAuthGuard } from './auth/jwt-auth.guard';

@Module(
  providers: [
    {
      provide: APP_GUARD,
      useClass: JwtAuthGuard,
    },
    {
      provide: APP_GUARD,
      useClass: RolesGuard,
    },
  ],
})
export class AppModule {}

#jwt-guard.ts 
import { ExecutionContext, Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { Reflector } from '@nestjs/core';
import { Observable } from 'rxjs';
import { IS_PUBLIC_KEY } from '../decorators/public.api.decorator';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  constructor(private readonly reflector: Reflector) {
    super();
  }

  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
    if (isPublic) return true;
    return super.canActivate(context);
  }
}


# bug

delete, bulk action still in web

link field to edit not to show 



blockfrost mainnet: trnthang@gmail.com
testnet : bitmaster.sg@gmail.com